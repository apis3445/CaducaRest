{
	"info": {
		"_postman_id": "5423fc7b-26df-4dec-8686-a4f45be6d3f3",
		"name": "Regression",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login_ValidUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"Token\", pm.response.json().Token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Usuario\": \"Carlos\",\n  \"Password\": \"DtfhkmTRQ8mNzgRY\",\n  \"Codigo\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/Usuarios/Login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"Usuarios",
								"Login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categorias",
			"item": [
				{
					"name": "Categorias_TokenCorrecto_RegresaCategorias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/api/Categorias",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"api",
								"Categorias"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clientes",
			"item": [
				{
					"name": "Clientes_ConOdata_RegresaDatos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Convertir el Json a un objeto",
									"var respuesta = pm.response.json();",
									"",
									"pm.test(\"El servicio regresa clientes\", function() ",
									"{",
									"    pm.expect(respuesta.value).not.to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/odata/Clientes",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"odata",
								"Clientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clientes_ODataParametros_RegresaDatosFiltrados",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" // Librería para ordenar arreglos",
									" // Read docs: https://lodash.com/docs/4.17.10#orderBy",
									"var _ = require('lodash');",
									"",
									"//Convertir el Json a un objeto",
									"var respuesta = pm.response.json();",
									"",
									"pm.test(\"El servicio regresa clientes\", function() ",
									"{",
									"    pm.expect(respuesta.value).not.to.be.empty;",
									"});",
									"",
									"pm.test(\"El servicio regresa solamente 5 clientes\", function() ",
									"{",
									"    pm.expect(respuesta.value).to.have.lengthOf(5);",
									"});",
									"",
									"pm.test('Los clientes estan ordenados por Razón social descendente', () => {",
									"    var clientesOrdenados = _.orderBy(respuesta.value, ['RazonSocial'],['desc']);",
									"    pm.expect(respuesta.value).to.eql(clientesOrdenados);    ",
									"});",
									"",
									"pm.test(\"Todos los clientes estan activos\",  () => {",
									"    pm.expect(respuesta.value.filter(element => element.Activo == true)).to.have.lengthOf(5);",
									"});",
									"",
									"pm.test(\"La respuesta incluye una propiedad count\",  () => {",
									"    pm.expect(respuesta).to.have.property('@odata.count');",
									"});",
									"",
									"pm.test(\"La respuesta incluye propiedades Clave,RazonSocial, Activo\",  () => {",
									"    pm.expect(respuesta.value[0]).to.have.all.keys('Clave', 'RazonSocial', 'Activo');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/odata/Clientes?$select=Clave,RazonSocial,Activo&$filter=Activo eq true&$count=true&$orderby=RazonSocial desc&$top=5",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"odata",
								"Clientes"
							],
							"query": [
								{
									"key": "$select",
									"value": "Clave,RazonSocial,Activo"
								},
								{
									"key": "$filter",
									"value": "Activo eq true"
								},
								{
									"key": "$count",
									"value": "true"
								},
								{
									"key": "$orderby",
									"value": "RazonSocial desc"
								},
								{
									"key": "$top",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}